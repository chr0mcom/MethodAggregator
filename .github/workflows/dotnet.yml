# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 #fetch-depth is needed for GitVersion
      
      #Install and calculate the new version with GitVersion  
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: 5.x
      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.10.2
        id: gitversion # step id used as reference for output values
      - name: Display GitVersion outputs
        run: |
          echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
      
      #Build/pack the project
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore MethodAggregator/MethodAggregator.csproj
      - name: Build
        run: dotnet build MethodAggregator/MethodAggregator.csproj -c Release -p:Version='${{ steps.gitversion.outputs.SemVer }}'
      - name: Build and Pack NuGet package
        run: dotnet pack MethodAggregator/MethodAggregator.csproj -p:Version='${{ steps.gitversion.outputs.SemVer }}' -c Release
      - name: Upload NuGet package to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: nugetPackage
          path: MethodAggregator/bin/Release/
  
  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' # only run job if on the main branch   
    
    steps:
      #Push NuGet package to GitHub packages
      - name: Download nuget package artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: nugetPackage
          
      - name: list all files
        run: ls -Rla
      - name: Prep packages
        run: dotnet nuget add source --username chr0mcom --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/chr0mcom/index.json"
#      - name: Push package to GitHub packages
#        if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change  
#        run: dotnet nuget push nugetPackage/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }}  --source "github"
#      
      #Create release
      - name: Create Release
        if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change
        uses: ncipollo/release-action@v1.12.0
        with:
          tag: ${{ needs.build.outputs.Version }}
          name: Release ${{ needs.build.outputs.Version }}
          artifacts: "nugetPackage/*"
          token: ${{ secrets.GITHUB_TOKEN }}
